"use strict";(self.webpackChunkenchird_wiki=self.webpackChunkenchird_wiki||[]).push([[9377],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},464:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return m}});var n=r(7462),i=r(3366),s=(r(7294),r(3905)),o=["components"],a={sidebar_position:4,title:"Main process"},l="The Main process",c={unversionedId:"nudle/desktop/main-process",id:"nudle/desktop/main-process",title:"Main process",description:"The main process is node.js process which is the primary core process initializing the app and running core functions like:",source:"@site/docs/nudle/desktop/main-process.md",sourceDirName:"nudle/desktop",slug:"/nudle/desktop/main-process",permalink:"/enchird-wiki/docs/nudle/desktop/main-process",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Main process"},sidebar:"tutorialSidebar",previous:{title:"Project structure",permalink:"/enchird-wiki/docs/nudle/desktop/project-structure"},next:{title:"Render process",permalink:"/enchird-wiki/docs/nudle/desktop/render-process"}},p={},u=[{value:"Structure",id:"structure",level:2},{value:"Entry File",id:"entry-file",level:3},{value:"Modules",id:"modules",level:3},{value:"Services",id:"services",level:3},{value:"Workers",id:"workers",level:3}],d={toc:u};function m(e){var t=e.components,r=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"the-main-process"},"The Main process"),(0,s.kt)("p",null,"The main process is node.js process which is the primary core process initializing the app and running core functions like:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Creating the app window and loading the UI"),(0,s.kt)("li",{parentName:"ul"},"Communicates with the render process via the ",(0,s.kt)("a",{parentName:"li",href:"https://www.electronjs.org/docs/latest/api/ipc-main"},"Inter process communication (ipc)")," channel"),(0,s.kt)("li",{parentName:"ul"},"Checks for updates, downloads available updates and notifies the render process of the downloaded update"),(0,s.kt)("li",{parentName:"ul"},"Writing files to disk."),(0,s.kt)("li",{parentName:"ul"},"Initializes the settings configuration file")),(0,s.kt)("p",null,"The main process entry file is ",(0,s.kt)("inlineCode",{parentName:"p"},"src/main/index.ts"),". Learn more about the ",(0,s.kt)("a",{parentName:"p",href:"https://www.electronjs.org/docs/latest/tutorial/process-model#the-main-process"},"main process"),"."),(0,s.kt)("h2",{id:"structure"},"Structure"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500 src\n   \u251c\u2500 main                \n   |  \u251c\u2500 modules          \n   |  |  \u251c\u2500 logger.module.ts         \n   |  |  \u251c\u2500 printer.module.ts         \n   |  |  \u251c\u2500 service.module.ts         \n   |  |  \u251c\u2500 settings.module.ts         \n   |  \u251c\u2500 services \n   |  |  \u251c\u2500 hook.services.ts         \n   |  |  \u251c\u2500 index.ts         \n   |  |  \u251c\u2500 listeners.services.ts         \n   |  |  \u251c\u2500 scheduler.services.ts       \n   |  \u251c\u2500 workers\n   |  |  \u251c\u2500 index.ts     \n   \u2502  \u251c\u2500 index.dev.ts\n   \u2502  \u251c\u2500 index.ts\n   \u2502  \u251c\u2500 main.d.ts\n   \u2502  \u2514\u2500 tsconfig.json\n")),(0,s.kt)("h3",{id:"entry-file"},"Entry File"),(0,s.kt)("p",null,"The entry file ",(0,s.kt)("inlineCode",{parentName:"p"},"src/main/index.ts")," is the entry point of the Nudle electron application. This file contains code to create the window, load modules etc."),(0,s.kt)("h3",{id:"modules"},"Modules"),(0,s.kt)("p",null,"Modules are classes or a mechanism to group functions which are used to specific tasks. For example;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"ServiceModule")," class imports  and instantiates services."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"SettingsModule")," class reads/writes to the settings and sends the settings object to the main process."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"LoggerModule")," class is used to write error log events to a logger file.")),(0,s.kt)("h3",{id:"services"},"Services"),(0,s.kt)("p",null,"Services are functions that run at specific points during the application life-cycle. You can create a service to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Listen to ipc events form the render process."),(0,s.kt)("li",{parentName:"ul"},"Run every hour or every day at a particular time"),(0,s.kt)("li",{parentName:"ul"},"Run when the app is initialized, looses focus.")),(0,s.kt)("p",null,"See the ",(0,s.kt)("a",{parentName:"p",href:"/enchird-wiki/docs/nudle/desktop/services"},"Services chapter")),(0,s.kt)("h3",{id:"workers"},"Workers"),(0,s.kt)("p",null,"Workers (threads) are useful for performing CPU-intensive operations.  ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org/api/worker_threads.html#worker-threads"},"Learn more about workers")))}m.isMDXComponent=!0}}]);