"use strict";(self.webpackChunkenchird_wiki=self.webpackChunkenchird_wiki||[]).push([[1356],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5276:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return u},toc:function(){return p},default:function(){return m}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:7},l="Services",c={unversionedId:"nudle/desktop/services",id:"nudle/desktop/services",title:"Services",description:"Services are functions that run at specific points during the application life-cycle. You can create a service to:",source:"@site/docs/nudle/desktop/services.md",sourceDirName:"nudle/desktop",slug:"/nudle/desktop/services",permalink:"/enchird-wiki/docs/nudle/desktop/services",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"State management",permalink:"/enchird-wiki/docs/nudle/desktop/state-management"},next:{title:"Database",permalink:"/enchird-wiki/docs/nudle/desktop/database-structure"}},u={},p=[{value:"Listeners",id:"listeners",level:2},{value:"Example",id:"example",level:4},{value:"Hooks",id:"hooks",level:2},{value:"Schedulers",id:"schedulers",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"services"},"Services"),(0,i.kt)("p",null,"Services are functions that run at specific points during the application life-cycle. You can create a service to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Listen to ipc events form the render process."),(0,i.kt)("li",{parentName:"ul"},"Run every hour or every day at a particular time"),(0,i.kt)("li",{parentName:"ul"},"Run when the app is initialized, looses focus.")),(0,i.kt)("p",null,"Service files only run int the main process. Service files are located in the path ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/services"),". There are three types of services; ",(0,i.kt)("strong",{parentName:"p"},"listeners"),", ",(0,i.kt)("strong",{parentName:"p"},"schedulers")," and ",(0,i.kt)("strong",{parentName:"p"},"hooks"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"main\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u251c\u2500\u2500 hooks.services.ts\n\u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 listener.services.ts\n\u2502   \u2502   \u251c\u2500\u2500 scheduler.services.ts\n")),(0,i.kt)("h2",{id:"listeners"},"Listeners"),(0,i.kt)("p",null,"Ipc (Inter process communication) is a protocol used by electron to communicate between the main process and render process. ",(0,i.kt)("a",{parentName:"p",href:"https://www.electronjs.org/docs/latest/tutorial/ipc"},"See Electron Ipc"),". Usually what happens is you will create a listener function in the main process then invoke it by sending a message form the renderer process and when the process is done, it returns a value or not. For homogeneity, it is recommended to put all Ipc listeners in the file  ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/services/listener.services.ts"),", so it is easily identifiable and easy to debug. All listeners should be added in the ",(0,i.kt)("inlineCode",{parentName:"p"},"registerMainProcessListeners")," function. See the example below;"),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { NudleServiceContextWindow } from "../modules/service.module";\n\nexport default function registerMainProcessListeners(context: NudleServiceContextWindow) {\n /**\n  * This service listens to the \'APP::BACKUP_REQUEST_REPLY\' event from the render process\n  *  and writes the backup data to a file.\n  * ipc is the same as ipcMain exported from electron, \n  * NudleService factory will provide iPcMain as ipc in the context.\n */\n  context.ipc.on("APP::BACKUP_REQUEST_REPLY", (event, arg) => {\n    // write backup to file\n    outputFile(join(context.configPath, "_nudle-db.bck"), arg, (err) => {\n      console.log(err);\n    });\n  });\n}\n\n')),(0,i.kt)("h2",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Hooks are functions that are called at specific points during the application's life cycle. The events are "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"on-init")," When the application is ready to start"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"on-window-blur")," When the window looses focus"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"on-window-focus")," When the window gains focus"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"on-window-show")," When the window is displayed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," All hooks must return a ",(0,i.kt)("strong",{parentName:"p"},"Boolean")," and should be exported else they will not be called by Nudle."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createHookService } from \"../modules/service.module\";\n\n  // This function will be called when the window looses focus\nconst onBlurHook = createHookService('on-window-blur', (ctx) => {\n  console.log('This window has lost focus');\n  return true;\n});\n\nexport { onBlurHook }\n")),(0,i.kt)("p",null,"Alternatively, calling ",(0,i.kt)("inlineCode",{parentName:"p"},"createService()")," is the same as calling ",(0,i.kt)("inlineCode",{parentName:"p"},"createHookService('on-init')"),". The both functions will be executed once the app is ready."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createService, createHookService } from \"../modules/service.module\";\n\n  // This function will be called when the app is ready\n  const onReadyHook1 = createHookService('on-init', (ctx) => {\n    console.log('The app is ready');\n    return true;\n  });\n\n  // This function will be called when the app is ready\n  const onReadyHook2 = createService((ctx) => {\n    console.log('The app is ready');\n    return true;\n  }); \n\nexport { onReadyHook1, onReadyHook2 }\n")),(0,i.kt)("p",null,"Add your hooks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/services/hooks.services.ts")," file."),(0,i.kt)("h2",{id:"schedulers"},"Schedulers"),(0,i.kt)("p",null,"Schedulers are basically cron jobs that run at specific time. For example you can create a scheduler service that runs every hour. ",(0,i.kt)("a",{parentName:"p",href:"https://www.freeformatter.com/cron-expression-generator-quartz.html"},"Learn more about cron jobs"),". See the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { createSchedulerService } from "../modules/service.module";\n\n // This service runs every hour\nconst hourlyScheduler = createSchedulerService("30 */1 * * *", (context) => {\n  console.log(\'Hi, I run every hour!\')\n});\n\nexport { hourlyScheduler }\n')),(0,i.kt)("p",null,"If you want to create a scheduler function, you should write it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/services/scheduler.services.ts"),". ",(0,i.kt)("strong",{parentName:"p"},"Note")," All functions you write here must be exported, else they would not be called."))}m.isMDXComponent=!0}}]);